private Room generateRoom(Room link) {
        Room room;
        int x, y, tmp;
        int doorX, doorY;
        int height, width;
        if (isCorridor) {
            width = 0;
            height = 0;
        } else {
            height = this.random.nextInt(MAX_ROOM_HEIGHT - MIN_ROOM_HEIGHT) + MIN_ROOM_HEIGHT;
            width = this.random.nextInt(MAX_ROOM_WIDTH - MIN_ROOM_WIDTH) + MIN_ROOM_WIDTH;
        }
        switch (this.random.nextInt(4)) {
            case 0:
                x = link.bottom.x + 1;
                if (link.bottom.y == link.top.y) {
                    y = link.top.y;
                } else {
                    y = this.random.nextInt(link.bottom.y - link.top.y) + link.top.y;
                }
                doorX = x - 1;
                doorY = y;
                if (isCorridor) {
                    width = this.random.nextInt(MAX_CORRIDOR_LENGTH - MIN_CORRIDOR_LENGTH) + MIN_CORRIDOR_LENGTH;
                } else {
                    if (this.random.nextBoolean()) {
                        y -= height;
                    }
                }
                break;
            case 1:
                x = link.top.x - 2;
                if (link.bottom.y == link.top.y) {
                    y = link.top.y;
                } else {
                    y = this.random.nextInt(link.bottom.y - link.top.y) + link.top.y;
                }
                doorX = x + 1;
                doorY = y;
                x -= width;
                if (isCorridor) {
                    width = this.random.nextInt(MAX_CORRIDOR_LENGTH - MIN_CORRIDOR_LENGTH) + MIN_CORRIDOR_LENGTH;
                } else {
                    if (this.random.nextBoolean()) {
                        y -= height;
                    }
                }
                break;
            case 2:
                if (link.bottom.x == link.top.x) {
                    x = link.top.x;
                } else {
                    x = this.random.nextInt(link.bottom.x - link.top.x) + link.top.x;
                }
                y = link.bottom.y + 1;
                doorX = x;
                doorY = y - 1;
                if (isCorridor) {
                    height = this.random.nextInt(MAX_CORRIDOR_LENGTH - MIN_CORRIDOR_LENGTH) + MIN_CORRIDOR_LENGTH;
                } else {
                    if (this.random.nextBoolean()) {
                        x -= width;
                    }
                }
                break;
            case 3:
                /* Falls through */
            default:
                if (link.bottom.x == link.top.x) {
                    x = link.top.x;
                } else {
                    x = this.random.nextInt(link.bottom.x - link.top.x) + link.top.x;
                }
                y = link.top.y - 2;
                doorX = x;
                doorY = y + 1;
                y -= height;
                if (isCorridor) {
                    height = this.random.nextInt(MAX_CORRIDOR_LENGTH - MIN_CORRIDOR_LENGTH) + MIN_CORRIDOR_LENGTH;
                } else {
                    if (this.random.nextBoolean()) {
                        x -= width;
                    }
                }
                break;
        }
        room = new Room(x, y, x + width, y + height);
        if (!isPlaceable(room)) {
            return null;
        }
        room.print();
        this.map[doorX][doorY] = Tile.CLOSED_DOOR;
        return room;
    }